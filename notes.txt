https://spin.atomicobject.com/2016/06/26/parallelize-development-git-worktrees/
  >>> FOR NOW, running this project in parallel JS & TS branches




body
  main
  header
    Y title
    click-to-copy
  options
    Y textarea 
    Y add-me
    dice roller input & fill-in
    toggle: traits ideals bonds flaws quirks trinkets
    trait-searchbar (& selection popup)
  characteristics
    Y text editable
    Y remove
    label for type (small font, ideal bond etc...)
    drag handle



TODO 
  sourcemaps for console.logs
  remove extra element in component (pass in style)
    OR is there a way to pass in the DOM root to components generically?
  "main" component
  scope/module for state & registration (hmm "file state"?) 


CONVENTIONS 
  DOMThing for anything js variable that is a DOM element...

  char vs characteristics
    "characteristic(s)" as state field and css,
    "char" abbreviation for other uses (component, element, method)

  snake-case in css (class/id), camelCase for javascript (varibles / object key names)



https://betterprogramming.pub/chaining-patterns-in-javascript-df05e3030ee7



LINTING 
  > might be worth just experimenting with eslint for a bit before u add prettier...


Simplistic framework

    ?? maybe what you want here is "register" - something that connects a certain value with state, and receives updates...?

    https://stackoverflow.com/questions/56037261/how-to-rerender-single-element-of-a-web-component
    HTML machine... eg: https://www.youtube.com/watch?v=hYCqhdJiAxM 
    state management
    flexible render method (use a templating library?)
    wrapper for listener assignment (to update state)
    trigger to render on state update (triggers?)
      PROBLEM is that reRender (as rebuilding DOM) causes inputs to loose focus
        (ie: it's not just a performance issue)
        even autofocus probably won't work - cursor position is prob internal state of the field
      SO it's a bad approach to automatically re-build on state field changes
      best to only call rebuild when you need it
      what you might could do is to still register callbacks based on state field changes though
        (would be nice to define these internally for each component)
        so eg: in "Characteristic" component your callback updates the field value 
        (note that this requires using array/object overwrites every time...)
        (see notes about reg in component.js)
      BUT, there may still need to be a distinction between "events in general" and "state updates"
        example: 
          AddMe button - this can rebuild the list because loss of focus at that time is ok
          vs updating (via contenteditable) the text of an item in the list
          both will setState('characteristics', [...newCharacteristics])
          so the pubsub system will have to develop there
            expand current methods? or use separate methods for stateField and general?
            probably separate, because current setState calls registered items EVERY TIME
              (?...are there things that you reliably want to do that with?
                having the hook there is a neat idea (as a feature) but not clear if it will be used...
        but for starters let's try them in the same and see what happens...
        BTW you'll want to register an array of funtions (same event can call multiple things)
      ...it may take a while (even to end of project) to know how/whether you're going to use 
        the setState auto-publish & component auto-register features
        let's keep them in for how and watch how the rest of this builds
        EXAMPLES
          >>> currently setState autoPublish is used for mainInput
    
    Hmm:
      "would be cool to use method chaining here: const mainInput = build(...).register(...)"




TODO babel experiment
    doc tho https://babeljs.io/docs/en/
    try to ID some features which are/aren't present
      like what are some advanced features that aren't in browsers yet?
    study: what features from what releases?
      https://www.odinschool.com/blog/programming/java-script-versions#:~:text=ES5%20was%20released%20in%202009,release%20of%20its%20previous%20version.
    fyi: https://babeljs.io/docs/en/babel-preset-typescript 



TODO drag
  https://www.npmjs.com/package/sortablejs



TODO css modules
  https://blog.logrocket.com/how-to-configure-css-modules-webpack/
  https://blog.jakoblind.no/css-modules-webpack/



TODO study:
  - VSCode why does search with src include node_modules?
  - Study TypeScript & DOM
      https://www.typescriptlang.org/docs/handbook/dom-manipulation.html
      difference between children and childNodes?
  - am I using the term 'declarative' correctly?
      https://alexsidorenko.com/blog/react-is-declarative-what-does-it-mean/
      https://stackoverflow.com/questions/33655534/difference-between-declarative-and-imperative-in-react-js




*** Personalities *********************************************************
    dndbeyond.com/sources/basic-rules/personality-and-background
    http://weirdzine.com/wp-content/uploads/2015/09/Personality-Traits.pdf
    https://mykindofmeeple.com/dnd-personality-traits/


*** HELPERS *** 
function removeAllChildNodes(parent) {
  while (parent.firstChild) {
      parent.removeChild(parent.firstChild);
  }
}


*** TS FYI ****************************************************************************************

// let verbList: string[][] = [];
// let verbList: Array<string>[] = [];

// For CDN use:
// https://stackoverflow.com/questions/12709074/how-do-you-explicitly-set-a-new-property-on-window-in-typescript
  declare global { interface Window { dragula: any; } }
  const verbsDrake = dragula([DOMVerbList, DOMTrash], {
      removeOnSpill: false,
  });

  // https://medium.com/@jeffbutsch/typescript-interface-functions-c691a108e3f1
  // https://www.tutorialsteacher.com/typescript/typescript-interface
  // https://medium.com/geekculture/html-event-handling-in-typescript-b9ca7178d912
    onClick?(): void, // Type '(e: Event) => void' is not assignable to type '() => void'
    // onClick?(arg0: Event): void, // but this works
    // onClick?: (arg0: Event) => void, // so does this
    const mainInput = build(options, 'input', {className: 'main-input', onClick: listenerTest});

  Object key typing:
    https://bobbyhadz.com/blog/typescript-element-implicitly-has-any-type-expression
    https://bobbyhadz.com/blog/typescript-type-string-is-not-assignable-to-type#:~:text=The%20%22Type%20'string'%20is,const%20or%20a%20type%20assertion.
    





*** DOM ***
  https://oozou.com/til/create-element-with-attributes-in-one-line-69





*** RESOURCES ****************************************************************************************
  https://game-icons.net/


*** MYSTERIES ****************************************************************************************
    - something added extra .js files alongside .ts files
        https://stackoverflow.com/questions/63422959/webpack-build-or-typescript-is-creating-js-files-right-in-my-src
        what's weird is that it doesn't do this on build
            not sure exactly when/why these files are created
        also maybe u didn't want to get rid of them
            tsconfig has "target": "es5", and it's interesting,
              eg ListTemplate.js used an iife

*** MYSTERIES (solved) ****************************************************************************************
  main input not clearing wtf. it breaks between these commits:
    3249459 basic individual components without reactivity
    3665b82 addMe button and list with call to render
      https://stackoverflow.com/questions/29929797/setattribute-doesnt-work-the-way-i-expect-it-to
      https://stackoverflow.com/questions/6003819/what-is-the-difference-between-properties-and-attributes-in-html